"""Provides default value for input field."""
directive @default(value: JSON!) on INPUT_FIELD_DEFINITION

input _idOperatorsFilterbookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindManybookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOnebookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveManybookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveOnebookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateManybookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateOnebookInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

type book {
  name: String
  author: String
  _id: MongoID!
}

"""A connection to a list of items."""
type bookConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [bookEdge!]!
}

"""An edge in a connection."""
type bookEdge {
  """The item at the end of the edge"""
  node: book!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type bookPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [book]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

input CreateManybookInput {
  name: String!
  author: String!
}

type CreateManybookPayload {
  """Created document ID"""
  recordIds: [MongoID]!

  """Created documents"""
  records: [book]!

  """Count of all documents created"""
  createCount: Int!
}

input CreateOnebookInput {
  name: String!
  author: String!
}

type CreateOnebookPayload {
  """Created document ID"""
  recordId: MongoID

  """Created document"""
  record: book
}

input FilterbookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterbookInput
  OR: [FilterbookInput!]
  AND: [FilterbookInput!]
}

input FilterFindManybookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterFindManybookInput
  OR: [FilterFindManybookInput!]
  AND: [FilterFindManybookInput!]
}

input FilterFindOnebookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterFindOnebookInput
  OR: [FilterFindOnebookInput!]
  AND: [FilterFindOnebookInput!]
}

input FilterRemoveManybookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterRemoveManybookInput
  OR: [FilterRemoveManybookInput!]
  AND: [FilterRemoveManybookInput!]
}

input FilterRemoveOnebookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterRemoveOnebookInput
  OR: [FilterRemoveOnebookInput!]
  AND: [FilterRemoveOnebookInput!]
}

input FilterUpdateManybookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUpdateManybookInput
  OR: [FilterUpdateManybookInput!]
  AND: [FilterUpdateManybookInput!]
}

input FilterUpdateOnebookInput {
  name: String
  author: String
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUpdateOnebookInput
  OR: [FilterUpdateOnebookInput!]
  AND: [FilterUpdateOnebookInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `ID` scalar type represents a unique MongoDB identifier in collection.
MongoDB by default use 12-byte ObjectId value
(https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  BookCreateOne(record: CreateOnebookInput!): CreateOnebookPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  BookCreateMany(records: [CreateManybookInput!]!): CreateManybookPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  BookUpdateById(record: UpdateByIdbookInput!): UpdateByIdbookPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  BookUpdateOne(
    record: UpdateOnebookInput!

    """Filter by fields"""
    filter: FilterUpdateOnebookInput
    sort: SortUpdateOnebookInput
    skip: Int
  ): UpdateOnebookPayload

  """
  Update many documents without returning them: Use Query.update mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  BookUpdateMany(
    record: UpdateManybookInput!

    """Filter by fields"""
    filter: FilterUpdateManybookInput
    sort: SortUpdateManybookInput
    skip: Int
    limit: Int = 1000
  ): UpdateManybookPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  BookRemoveById(_id: MongoID!): RemoveByIdbookPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  BookRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnebookInput
    sort: SortRemoveOnebookInput
  ): RemoveOnebookPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  BookRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManybookInput!
  ): RemoveManybookPayload
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterbookInput {
  _id: _idOperatorsFilterbookInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterFindManybookInput {
  _id: _idOperatorsFilterFindManybookInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterFindOnebookInput {
  _id: _idOperatorsFilterFindOnebookInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterRemoveManybookInput {
  _id: _idOperatorsFilterRemoveManybookInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterRemoveOnebookInput {
  _id: _idOperatorsFilterRemoveOnebookInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUpdateManybookInput {
  _id: _idOperatorsFilterUpdateManybookInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUpdateOnebookInput {
  _id: _idOperatorsFilterUpdateOnebookInput
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  BookById(_id: MongoID!): book
  BookByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsbookInput): [book]
  BookOne(
    """Filter by fields"""
    filter: FilterFindOnebookInput
    skip: Int
    sort: SortFindOnebookInput
  ): book
  BookMany(
    """Filter by fields"""
    filter: FilterFindManybookInput
    skip: Int
    limit: Int = 1000
    sort: SortFindManybookInput
  ): [book]
  BookCount(
    """Filter by fields"""
    filter: FilterbookInput
  ): Int
  BookConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManybookInput

    """Sort argument for data ordering"""
    sort: SortConnectionbookEnum = _ID_DESC
  ): bookConnection
  BookPagination(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManybookInput
    sort: SortFindManybookInput
  ): bookPagination
}

type RemoveByIdbookPayload {
  """Removed document ID"""
  recordId: MongoID

  """Removed document"""
  record: book
}

type RemoveManybookPayload {
  """Affected documents number"""
  numAffected: Int
}

type RemoveOnebookPayload {
  """Removed document ID"""
  recordId: MongoID

  """Removed document"""
  record: book
}

enum SortConnectionbookEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindByIdsbookInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManybookInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOnebookInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnebookInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManybookInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnebookInput {
  _ID_ASC
  _ID_DESC
}

input UpdateByIdbookInput {
  name: String
  author: String
  _id: MongoID!
}

type UpdateByIdbookPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: book
}

input UpdateManybookInput {
  name: String
  author: String
}

type UpdateManybookPayload {
  """Affected documents number"""
  numAffected: Int
}

input UpdateOnebookInput {
  name: String
  author: String
}

type UpdateOnebookPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: book
}
